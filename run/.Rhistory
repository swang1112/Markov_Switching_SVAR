erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
u %>% plot
var3 %>% Plot
var3 %>% plot
var3 %>% plot
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
erg_optim$par
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
B1 = B1[c(2,3,1)]
B1
(B1 = getB(theta_optim1, C))
B1 = B1[,c(2,3,1)]
B1
B1 = B1[,c(2,3,1)]; B1[,1] = B1[,1]*-1
B2
B1
(B1 = getB(theta_optim1, C))
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2
B1
B1
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2
B2 = B2[,c(1,3,2)]
B2
B1
cum_irf = function(dat){
dat %>% as.data.frame() %>% apply(MARGIN = 2, cumsum)
}
plot_irf = function(dat, variable = c('FX', 'CDS', 'IR'), cum = FALSE){
if(cum){dat = dat %>% cum_irf}
h = 0:(nrow(dat)-1)
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat$variable = factor(dat$variable, levels = c('V1', 'V4', 'V7', 'V2', 'V5', 'V8', 'V3', 'V6', 'V9'))
my_labeller <- as_labeller(c(V1 = paste("epsilon[",1,"]", "%->%", variable[1]),
V2 = paste("epsilon[",1,"]", "%->%", variable[2]),
V3 = paste("epsilon[",1,"]", "%->%", variable[3]),
V4 = paste("epsilon[",2,"]", "%->%", variable[1]),
V5 = paste("epsilon[",2,"]", "%->%", variable[2]),
V6 = paste("epsilon[",2,"]", "%->%", variable[3]),
V7 = paste("epsilon[",3,"]", "%->%", variable[1]),
V8 = paste("epsilon[",3,"]", "%->%", variable[2]),
V9 = paste("epsilon[",3,"]", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
}
# IRF ---------------------------------------------------------------------
source('../fun/IRF.cpp')
# IRF ---------------------------------------------------------------------
source('../fun/IRF.cpp')
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
irf_1 = IRF_fast(Bcoef, B1, 20)
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_1
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf %>% t
irf_1
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_1
IRF_fast(Bcoef, B1, 20)
IRF_fast(Bcoef, B1, 20)
dat %>% as.data.frame()
dat = IRF_fast(Bcoef, B1, 20)
dat %>% as.data.frame()
dat %>% as.data.frame() %>% apply(MARGIN = 2, cumsum)
dat %>% as.data.frame() %>% apply(MARGIN = 2, cumsum) %>% dim
dat %>% as.data.frame() %>% t %>% apply(MARGIN = , cumsum)
dat = IRF_fast(Bcoef, B1, 20)
dat %>% as.data.frame() %>% t %>% apply(MARGIN = 2, cumsum)
dat %>% as.data.frame() %>% apply(MARGIN = 2, cumsum)
dat %>% as.data.frame() %>% apply(MARGIN = 2, cumsum) %>% t
dat = IRF_fast(Bcoef, B1, 20)
variable = c('oil_prod', 'real_act', 'oil_price')
dat
dat = dat %>% as.data.frame()
dat
dat %>% dim
dat[,1]
dat
dat = IRF_fast(Bcoef, B1, 20)
dat       = dat %>% as.data.frame()
dat = IRF_fast(Bcoef, B1, 20) %>% sapply(function(x) x) %>% t
dat = dat %>% as.data.frame()
dat
cum_irf = function(dat){
dat %>% sapply(function(x) x) %>% t %>% apply(MARGIN = 2, cumsum) %>% t
}
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_1
dat = IRF_fast(Bcoef, B1, 20)
dat %>% sapply(function(x) x) %>% t
dat %>% sapply(function(x) x) %>% t %>% as.data.frame()
%>% apply(MARGIN = 2, cumsum) %>% t
dat %>% sapply(function(x) x) %>% t %>% as.data.frame() %>% apply(MARGIN = 2, cumsum) %>% t
dat %>% sapply(function(x) x) %>% t %>% as.data.frame() %>% apply(MARGIN = 2, cumsum)
cum_irf = function(dat){
dat %>% sapply(function(x) x) %>% t %>% as.data.frame() %>% apply(MARGIN = 2, cumsum)
}
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_1
dat =irf_1
h = 0:(nrow(dat)-1)
h
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat
h = 0:(nrow(dat)-1)
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat$variable = factor(dat$variable, levels = c('V1', 'V4', 'V7', 'V2', 'V5', 'V8', 'V3', 'V6', 'V9'))
dat = irf_1
h = 0:(nrow(dat)-1)
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat$variable = factor(dat$variable, levels = c('V1', 'V4', 'V7', 'V2', 'V5', 'V8', 'V3', 'V6', 'V9'))
my_labeller <- as_labeller(c(V1 = paste("oil supply", "%->%", variable[1]),
V2 = paste("oil supply", "%->%", variable[2]),
V3 = paste("oil supply", "%->%", variable[3]),
V4 = paste("aggregate demand", "%->%", variable[1]),
V5 = paste("aggregate demand", "%->%", variable[2]),
V6 = paste("aggregate demand", "%->%", variable[3]),
V7 = paste("oil stock demand", "%->%", variable[1]),
V8 = paste("oil stock demand", "%->%", variable[2]),
V9 = paste("oil stock demand", "%->%", variable[3])),
default = label_parsed)
require(ggplot2)
h = 0:(nrow(dat)-1)
h
dat = irf_1
h = 0:(nrow(dat)-1)
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat$variable = factor(dat$variable, levels = c('V1', 'V4', 'V7', 'V2', 'V5', 'V8', 'V3', 'V6', 'V9'))
my_labeller <- as_labeller(c(V1 = paste("oil supply", "%->%", variable[1]),
V2 = paste("oil supply", "%->%", variable[2]),
V3 = paste("oil supply", "%->%", variable[3]),
V4 = paste("aggregate demand", "%->%", variable[1]),
V5 = paste("aggregate demand", "%->%", variable[2]),
V6 = paste("aggregate demand", "%->%", variable[3]),
V7 = paste("oil stock demand", "%->%", variable[1]),
V8 = paste("oil stock demand", "%->%", variable[2]),
V9 = paste("oil stock demand", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
my_labeller <- as_labeller(c(V1 = paste("oil_supply", "%->%", variable[1]),
V2 = paste("oilsupply", "%->%", variable[2]),
V3 = paste("oil supply", "%->%", variable[3]),
V4 = paste("aggregate demand", "%->%", variable[1]),
V5 = paste("aggregate demand", "%->%", variable[2]),
V6 = paste("aggregate demand", "%->%", variable[3]),
V7 = paste("oil stock demand", "%->%", variable[1]),
V8 = paste("oil stock demand", "%->%", variable[2]),
V9 = paste("oil stock demand", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
my_labeller <- as_labeller(c(V1 = paste("oil_supply", "%->%", variable[1]),
V2 = paste("oil_supply", "%->%", variable[2]),
V3 = paste("oil_supply", "%->%", variable[3]),
V4 = paste("aggregate_demand", "%->%", variable[1]),
V5 = paste("aggregate_demand", "%->%", variable[2]),
V6 = paste("aggregate_demand", "%->%", variable[3]),
V7 = paste("oil_stock_demand", "%->%", variable[1]),
V8 = paste("oil_stock_demand", "%->%", variable[2]),
V9 = paste("oil_stock_demand", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
my_labeller <- as_labeller(c(V1 = paste("os", "%->%", variable[1]),
V2 = paste("os", "%->%", variable[2]),
V3 = paste("os", "%->%", variable[3]),
V4 = paste("ad", "%->%", variable[1]),
V5 = paste("ad", "%->%", variable[2]),
V6 = paste("ad", "%->%", variable[3]),
V7 = paste("osd", "%->%", variable[1]),
V8 = paste("osd", "%->%", variable[2]),
V9 = paste("osd", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
B1 %*% t(B1)
B2 %*% t(B2)
Sig
u %>% cov
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% c))
(B2 = getB(theta_optim2, u %>% cov %>% c))
u %>% cov %>% c
theta_optim2 = par_optim[4:6]
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% c %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% c %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
u %>% cov %>% c %>% t
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% chol %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% chol %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% cum_irf
plot_irf = function(dat, variable = c('oil_prod', 'real_act', 'oil_price')){
h = 0:(nrow(dat)-1)
dat = data.frame(h, dat) %>% reshape2::melt('h')
dat$variable = factor(dat$variable, levels = c('V1', 'V4', 'V7', 'V2', 'V5', 'V8', 'V3', 'V6', 'V9'))
my_labeller <- as_labeller(c(V1 = paste("os", "%->%", variable[1]),
V2 = paste("os", "%->%", variable[2]),
V3 = paste("os", "%->%", variable[3]),
V4 = paste("ad", "%->%", variable[1]),
V5 = paste("ad", "%->%", variable[2]),
V6 = paste("ad", "%->%", variable[3]),
V7 = paste("osd", "%->%", variable[1]),
V8 = paste("osd", "%->%", variable[2]),
V9 = paste("osd", "%->%", variable[3])),
default = label_parsed)
dat %>% ggplot(aes(x = h, y = value)) + geom_line() + geom_hline(yintercept = 0, color = 'red') +
facet_wrap(~variable, scales = "free_y", ncol = 3, labeller = my_labeller) + xlab(" ") + ylab(" ") +
theme_bw()
}
irf_1 %>% plot_irf()
irf_2 %>% plot_irf()
dat = IRF_fast(Bcoef, B1, 20)
dat = dat %>% sapply(function(x) x) %>% t %>% as.data.frame()
dat
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% cum_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% cum_irf
irf_1 %>% plot_irf()
irf_2 %>% plot_irf()
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% trans_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% trans_irf
irf_1 %>% plot_irf()
irf_2 %>% plot_irf()
irf_1 %>% plot_irf()
irf_2 %>% plot_irf()
irf_1 %>% plot_irf() + ggtitle('state1')
ip1 = irf_1 %>% plot_irf() + ggtitle('state1')
ip2 = irf_2 %>% plot_irf() + ggtitle('state2')
library(gridExtra)
grid.arrange(ip1, ip2)
margin = theme(plot.margin = unit(c(1, 1, -4, 0), "mm"))
ips    = grid.arrange(grobs = lapply(list(ip1, ip2), "+", margin))
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
#erg_list  = readRDS( '../out/a_grid.rds')
erg_list  = readRDS( '../out/a_grid_fein.rds')
erg_vals  = erg_list %>% lapply('[[', 2) %>% unlist
erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
pdf("setid.pdf", width = 12, height = 6)
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
dev.off()
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% chol %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% chol %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% trans_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% trans_irf
ip1 = irf_1 %>% plot_irf() + ggtitle('state1')
ip2 = irf_2 %>% plot_irf() + ggtitle('state2')
library(gridExtra)
margin = theme(plot.margin = unit(c(1, 1, -4, 0), "mm"))
ips    = grid.arrange(grobs = lapply(list(ip1, ip2), "+", margin))
ggsave('ips.pdf', ips, width = 12, height = 8)
setwd("~/ownCloud/Markov_Switching_SVAR/plot")
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
#erg_list  = readRDS( '../out/a_grid.rds')
erg_list  = readRDS( '../out/a_grid_fein.rds')
erg_vals  = erg_list %>% lapply('[[', 2) %>% unlist
erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
pdf("TP_filtered.pdf", width = 12, height = 6)
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
dev.off()
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% chol %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% chol %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% trans_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% trans_irf
ip1 = irf_1 %>% plot_irf() + ggtitle('state1')
ip2 = irf_2 %>% plot_irf() + ggtitle('state2')
library(gridExtra)
margin = theme(plot.margin = unit(c(1, 1, -4, 0), "mm"))
ips    = grid.arrange(grobs = lapply(list(ip1, ip2), "+", margin))
ggsave('ips.pdf', ips, width = 12, height = 8)
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
source('../run/reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
#erg_list  = readRDS( '../out/a_grid.rds')
erg_list  = readRDS( '../out/a_grid_fein.rds')
erg_vals  = erg_list %>% lapply('[[', 2) %>% unlist
erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
pdf("TP_filtered.pdf", width = 12, height = 6)
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
dev.off()
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% chol %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% chol %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% trans_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% trans_irf
ip1 = irf_1 %>% plot_irf() + ggtitle('state1')
ip2 = irf_2 %>% plot_irf() + ggtitle('state2')
library(gridExtra)
margin = theme(plot.margin = unit(c(1, 1, -4, 0), "mm"))
ips    = grid.arrange(grobs = lapply(list(ip1, ip2), "+", margin))
ggsave('ips.pdf', ips, width = 12, height = 8)
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
source('../run/reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
setwd('../run/')
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
#erg_list  = readRDS( '../out/a_grid.rds')
erg_list  = readRDS( '../out/a_grid_fein.rds')
erg_vals  = erg_list %>% lapply('[[', 2) %>% unlist
erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
# states distribution -----------------------------------------------------
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
pdf("../plot/TP_filtered.pdf", width = 12, height = 6)
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
dev.off()
# structural multiplier ---------------------------------------------------
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, u %>% cov %>% chol %>% t))
(B2 = getB(theta_optim2, u %>% cov %>% chol %>% t))
# variable(oil supply, aggregate demand, oil stock demand)
B1 = B1[,c(2,3,1)];
B1[,1] = B1[,1]*-1
B1
B2[,c(1,2)] = B2[,c(1,2)] * -1
B2 = B2[,c(1,3,2)]
B2
# IRF ---------------------------------------------------------------------
Rcpp::sourceCpp('../fun/IRF.cpp')
source('../fun/trans_irf.R')
irf_1 = IRF_fast(Bcoef, B1, 20) %>% trans_irf
irf_2 = IRF_fast(Bcoef, B2, 20) %>% trans_irf
ip1 = irf_1 %>% plot_irf() + ggtitle('state1')
ip2 = irf_2 %>% plot_irf() + ggtitle('state2')
library(gridExtra)
margin = theme(plot.margin = unit(c(1, 1, -4, 0), "mm"))
ips    = grid.arrange(grobs = lapply(list(ip1, ip2), "+", margin))
ggsave('../plot/ips.pdf', ips, width = 12, height = 8)
