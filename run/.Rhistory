temp(Cmat(i, 0), Cmat(i, 0)) = cos(thetas(i));
temp(Cmat(i, 1), Cmat(i, 1)) = cos(thetas(i));
temp(Cmat(i, 0), Cmat(i, 1)) = -sin(thetas(i));
temp(Cmat(i, 1), Cmat(i, 0)) = sin(thetas(i));
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
par_optim = c( 1.4576889, 1.6310473, 0.3196288, 0.4926593, 1.2019128, 1.3041748,
0.5015089, 0.4916074)
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
B1 = getB(theta_optim1, C)
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
var3$datamat
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
data      = read.table('data.txt') %>% ts(start = c(1973, 2), end = c(2007, 12), frequency = 12)
data %>% autoplot
library(ggfortify)
data %>% autoplot
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
//Switching Probabilities
double p11 = theta(6);
double p12 = 1-p11;
double p22 = theta(7);
double p21 = 1-p22;
//initial state
double p1t = 0.5;
double p2t = 0.5;
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
par_optim = c( 1.4576889, 1.6310473, 0.3196288, 0.4926593, 1.2019128, 1.3041748,
0.5015089, 0.4916074)
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(theta, u, C)
TProb = filter_MS_ICA(par_optim, u, C)
TProb[,1]
TProb %>% dim
plot(data_time[-1], TProb[-1,1])
plot(data_time[-1], TProb[-1,1], type = 'l')
TProb[-1,1]
par(mar = c(2,1,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
par(mfrow = c(2,1))
par(mar = c(2,1,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
par(mar = c(2,2,1,1))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
//Switching Probabilities
double p11 = theta(6);
double p12 = 1-p11;
double p22 = theta(7);
double p21 = 1-p22;
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .5, .5)
loglike_MS_ICA(startpars, r = u, C = C)
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .5, .5)
loglike_MS_ICA(startpars, r = u, C = C)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.9, .9))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.9, .9))
erg_list$value
erg_list$par
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
TProb = filter_MS_ICA(par_optim, u, C)
par(mfrow = c(2,1))
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C)
par_optim = erg_list$par
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C)
TProb = filter_MS_ICA(par_optim, u, C, init = c(.9, .9))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .9, .9)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5))
erg_list$value
erg_list$par
par_optim = erg_list$par
par_optim
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C, init = c(.9, .9))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
cores = 7
cl = makeCluster(cores)
setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u,
C = C, init = c(.5, .5)
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = cl)
stopCluster(cl)
cores = 7
cl = makeCluster(cores)
setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u,
C = C, init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = cl)
stopCluster(cl)
c(rep(0,6), rep(0,2))
c(rep(pi/2, 6), rep(1,2))
startpars = c(runif(6, 0, pi/2), .9, .9)
startpars
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p
- 1)
C   = Sig %>% chol %>% t
cores = 7
cl = makeCluster(cores)
setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = cl)
stopCluster(cl)
warning)=
warnings()
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)))
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = cl)
cl = makeCluster(cores)
setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = cl)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = 7)
# cl = makeCluster(cores)
# setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = 7)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(0.5, 0.5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = 7)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(0.5, 0.5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)),
parallel = detectCores()-1)
cl = makeCluster(cores)
setDefaultCluster(cl=cl)
startpars = c(runif(6, 0, pi/2), .9, .9)
erg_list = optimParallel(startpars,fn = loglike_MS_ICA, r = u, C = C,
init = c(0.5, 0.5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)))
stopCluster(cl)
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .1, .1)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5))
erg_list$value
erg_list$par
par_optim = erg_list$par
par_optim = c( 0.09787152,  0.55440439,  0.09156761,  1.47105007, -0.11356540,  1.06635796,
0.39450519,0.85060587)
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .1, .1)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5))
erg_list$value
erg_list$par
par_optim = erg_list$par
stopCluster(cl)
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
startpars = c(runif(6, 0, pi/2), .9, .9)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)))
erg_list$value
erg_list$par
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
rm(list = ls())
library(magrittr)
library(kdensity)
library(optimParallel)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
startpars = c(runif(6, 0, pi/2), .9, .9)
loglike_MS_ICA(startpars, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5))
erg_list = optim(startpars,fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5),
lower = c(rep(0,6), rep(0,2)),
upper = c(rep(pi/2, 6), rep(1,2)))
erg_list$value
erg_list$par
par_optim = erg_list$par
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
rm(list = ls())
library(magrittr)
library(kdensity)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
#Rcpp::sourceCpp('../fun/kl_fast.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
start_prob = expand.grid(x = seq(0.1, 0.9, by = 0.1), y = seq(0.1, 0.9, by = 0.1))
View(start_prob)
start_prob = expand.grid(x = seq(0, 1, by = 0.1), y = seq(0, 1, by = 0.1))
grid_prob  = seq(0, 1, by = 0.1)
start_prob = expand.grid(x = grid_prob, y = grid_prob)
startpars = vector("numeric", length = nrow(start_prob))
startpars = vector("numeric", length = nrow(start_prob))
for (i in 1:length(startpars)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
start_prob[i,]
c(runif(6, 0, pi/2), start_prob[i,])
startpars = vector("matrix", length = nrow(start_prob))
grid_prob  = seq(0, 1, by = 0.1)
start_prob = expand.grid(x = grid_prob, y = grid_prob)
startpars = list()
for (i in 1:length(startpars)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob)
}
startpars
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
startpars
startpars[[1]]
c(runif(6, 0, pi/2), start_prob[i,])
runif(6, 0, pi/2)
start_prob[i,]
start_prob %>% class
start_prob = expand.grid(x = grid_prob, y = grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
startpars[[i]]
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
startpars[[i]]
?expand.grid
loglike_MS_ICA(startpars[[1]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[2]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[6]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[10]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[1000]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[100]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[78]], r = u, C = C, init = c(.5, .5))
startpars[[78]]
grid_prob
start_prob
loglike_MS_ICA(startpars[[120]], r = u, C = C, init = c(.5, .5))
startpars[[120]]
loglike_MS_ICA(startpars[[109]], r = u, C = C, init = c(.5, .5))
loglike_MS_ICA(startpars[[109]], r = u, C = C, init = c(.5, .5))
grid_prob  = seq(0, .1, by = 0.1)
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
library(pbapply)
erg_list = pblapply(startpars, optim, fn = loglike_MS_ICA, r = u, C = C, init = c(.5, .5), cl = 7)
start_time = Sys.time()
erg_list[[2]]
saveRDS(erg_list, '../out/a_grid.rds')
end_time = Sys.time()
diff.Date(end_time, start_time)
difftime(end_time, start_time)
end_time = Sys.time()
elapsed_time = difftime(end_time, start_time)
Journal = data.frame(start_time, end_time, elapsed_time)
Journal
write.csv(Journal, "../out/erg_list.csv")
rm(list = ls())
library(magrittr)
library(kdensity)
library(pbapply)
source('reduced_form.R')
Rcpp::sourceCpp('../fun/MS_ICA.cpp')
# variable(oil production, real activities, oil price)
Sig = crossprod(u)/(var3$obs - 3 * var3$p - 1)
C   = Sig %>% chol %>% t
erg_list = readRDS( '../out/a_grid.rds')
erg_list[[120]]
erg_vals = erg_list %>% lapply('[[', value)
erg_vals = erg_list %>% lapply('[[', 2)
erg_vals
erg_vals = erg_list %>% lapply('[[', 2) %>% unlist
erg_list[[which.min(erg_vals)]]
which.min(erg_vals)
erg_list  = readRDS( '../out/a_grid.rds')
erg_vals  = erg_list %>% lapply('[[', 2) %>% unlist
erg_optim = erg_list[[which.min(erg_vals)]]
par_optim = erg_optim$par
theta_optim1 = par_optim[1:3]
theta_optim2 = par_optim[4:6]
(B1 = getB(theta_optim1, C))
(B2 = getB(theta_optim2, C))
TProb = filter_MS_ICA(par_optim, u, C, init = c(.5, .5))
par(mfrow = c(2,1))
par(mar = c(2,2,1,1))
plot(data_time[-1], TProb[-1,1], type = 'l', main = 'state1')
plot(data_time[-1], TProb[-1,2], type = 'l', main = 'state2')
par(mfrow = c(1,1))
grid_prob  = seq(0, 1, by = 0.05)
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
grid_prob  = seq(0, 1, by = 0.01)
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
grid_prob  = seq(0, 1, by = 0.1)
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
121/6
grid_prob  = seq(0, 1, by = 0.01)
start_prob = expand.grid(grid_prob, grid_prob) %>% as.matrix()
startpars = list()
for (i in 1:nrow(start_prob)) {
startpars[[i]] = c(runif(6, 0, pi/2), start_prob[i,])
}
10201/19/60/24
10201/19/60
source('~/ownCloud/Markov_Switching_SVAR/run/main.R')
source('~/ownCloud/Markov_Switching_SVAR/run/main.R')
source('~/ownCloud/Markov_Switching_SVAR/run/main.R')
